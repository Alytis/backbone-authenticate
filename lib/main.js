// Generated by CoffeeScript 1.6.3
/* Backbone.Authenticator

Provides OAuth2 client support to Backbone applications.
*/


(function() {
  var $, Authenticator, Backbone, defaultRegistry, jQuery, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (typeof window !== "undefined" && window !== null) {
    jQuery = window.jQuery;
    Backbone = window.Backbone || {};
    _ = window._;
  } else {
    jQuery = require('jquery');
    Backbone = require('backbone');
    _ = require('underscore');
  }

  $ = jQuery;

  Backbone.Authenticate = Backbone.Authenticate || {};

  Backbone.Authenticate.defaultRegistry = defaultRegistry = {
    popup: true,
    responseType: 'code',
    grantType: 'authorization_code',
    paramNames: {
      client_id: 'client_id',
      client_secret: 'client_secret',
      redirect_uri: 'redirect_uri',
      scope: 'scope',
      state: 'state',
      response_type: 'response_type',
      grant_type: 'grant_type',
      code: 'code'
    }
  };

  Backbone.Authenticate.Authenticator = Authenticator = (function() {
    " Core object which can be used to perform all authentication-related tasks.\n";
    Authenticator.prototype.token = null;

    Authenticator.prototype.expires = null;

    Authenticator.prototype.refreshToken = null;

    Authenticator.prototype.scope = [];

    Authenticator.prototype.response = null;

    Authenticator.prototype.dialog = null;

    Authenticator.prototype.authenticated = false;

    Authenticator.prototype.requiredOptions = ['authenticateURI', 'redirectURI', 'clientID'];

    Authenticator.prototype.responseHandlerPrefix = 'handle';

    Authenticator.prototype.registry = defaultRegistry;

    function Authenticator(options) {
      this.isAuthenticated = __bind(this.isAuthenticated, this);
      this.refreshAuthorization = __bind(this.refreshAuthorization, this);
      this.processToken = __bind(this.processToken, this);
      this.handleToken = __bind(this.handleToken, this);
      this.handleCode = __bind(this.handleCode, this);
      this.processResponse = __bind(this.processResponse, this);
      this.begin = __bind(this.begin, this);
      _.extend(this, Backbone.Events);
      options = options || {};
      this.parseOptions(options);
    }

    Authenticator.prototype.parseOptions = function(options) {
      var name, _i, _len, _ref;
      _.extend(this.registry, options);
      _ref = this.requiredOptions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (this.registry[name]) {
          continue;
        }
        (this.registry[name] != null) || (function() {
          throw new Error("An " + name + " option must be provided to your                         Authenticator.");
        })();
      }
      if ((this.registry.responseType != null) && (this[this.methodNameForResponseType(this.registry.responseType)] == null)) {
        throw new Error("" + this.registry.responseType + " is not a supported response                         type for this authenticator.");
      }
      if (this.registry.responseType === 'code') {
        if (this.registry.authorizeURI == null) {
          throw new Error('Code-based authentication requires authorizeURI\
                         is provided to your authenticator.');
        }
        if (this.registry.grantType == null) {
          throw new Error('The grantType option must be provided when using\
                         code-based authentication.');
        }
      }
      if ((this.registry.scope != null) && (this.registry.scope.join == null)) {
        return this.registry.scope = _.map(this.registry.scope.split(','));
      }
    };

    Authenticator.prototype.authenticateURI = function() {
      /* Builds the URL to our initial OAuth endpoint.*/

      var paramNames, paramString, params;
      params = {};
      params[this.registry.paramNames.client_id] = this.registry.clientID;
      params[this.registry.paramNames.redirect_uri] = this.registry.redirectURI;
      params[this.registry.paramNames.response_type] = this.registry.responseType;
      if (this.registry.state != null) {
        params[this.registry.paramNames.state] = this.registry.state;
      }
      if (this.registry.scope != null) {
        params[this.registry.paramNames.scope] = this.registry.scope.join(',');
      }
      paramNames = _.keys(params);
      paramString = _.map(paramNames, function(name) {
        if ((params[name] != null) && params[name] !== '') {
          return name + '=' + params[name];
        } else {
          return name;
        }
      });
      paramString = paramString.join('&');
      return this.registry.authenticateURI + '?' + paramString;
    };

    Authenticator.prototype.authorizationData = function(code) {
      /* Builds the URL for our authorization endpoint for getting tickets.*/

      var params;
      params = {};
      params[this.registry.paramNames.client_id] = this.registry.clientID;
      params[this.registry.paramNames.grant_type] = this.registry.grantType;
      params[this.registry.paramNames.redirect_uri] = this.registry.redirectURI;
      params[this.registry.paramNames.code] = code;
      if (this.registry.clientSecret != null) {
        params[this.registry.paramNames.client_secret] = this.registry.clientSecret;
      }
      return params;
    };

    Authenticator.prototype.methodNameForResponseType = function(typeName) {
      /* Receives a response type and converts it into it's handler's method name.
      */

      var formattedTypeName;
      formattedTypeName = typeName[0].toUpperCase() + typeName.slice(1).toLowerCase();
      return this.responseHandlerPrefix + formattedTypeName;
    };

    Authenticator.prototype.begin = function() {
      /* Initiates the user authentication process.
      
      Initiates the user authentication process. Optionally, you can provide any
      registry options that this process should override.
      */

      var authenticateURI;
      authenticateURI = this.authenticateURI();
      if (this.registry.popup === true) {
        return this.dialog = window.open(authenticateURI);
      } else {
        return window.location = authenticateURI;
      }
    };

    Authenticator.prototype.processResponse = function() {
      /* After authentication, this function finishes the authentication process.
      */

      var handler, handlerName, parameters;
      parameters = jQuery.deparam(window.location.search.slice(1));
      if (parameters.error == null) {
        handlerName = this.methodNameForResponseType(this.registry.responseType);
        handler = this[handlerName];
        handler(parameters);
      } else {
        this.trigger('error', parameters.error);
      }
      if (parameters.state != null) {
        return this.trigger('state:change', parameters.state);
      }
    };

    Authenticator.prototype.handleCode = function(parameters) {
      /* Response handler for "code" response type.
      */

      var _this = this;
      if (parameters.code == null) {
        throw new Error('No code parameter was provided by the provider.');
      }
      return jQuery.ajax({
        type: 'POST',
        url: this.registry.authorizeURI,
        data: this.authorizationData(parameters.code),
        success: function(response) {
          return _this.processToken(JSON.parse(response));
        }
      });
    };

    Authenticator.prototype.handleToken = function(parameters) {
      /* Response handler for "token" response type.
      */

      if (parameters.token == null) {
        throw new Error('No token parameter was provided by the OAuth provider.');
      }
      return this.processToken(parameters.token);
    };

    Authenticator.prototype.processToken = function(response) {
      var authenticated;
      authenticated = this.isAuthenticated();
      window.response = response;
      this.token = response.access_token;
      this.refreshToken = response.refresh_token;
      this.expires = response.expires_in;
      this.scope = response.scope.split(',');
      if (this.refreshToken !== null) {
        setTimeout(this.refreshAuthorization, this.expires * 1000);
      }
      this.trigger('token:changed');
      if (!authenticated) {
        return this.trigger('authenticated');
      }
    };

    Authenticator.prototype.refreshAuthorization = function() {};

    Authenticator.prototype.isAuthenticated = function() {
      return this.token !== null;
    };

    return Authenticator;

  })();

}).call(this);
